//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SnapChat.ServiceReference1 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.Service_DatachatSoap")]
    public interface Service_DatachatSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/connectData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void connectData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/connectData", ReplyAction="*")]
        System.Threading.Tasks.Task connectDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loadAllData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet loadAllData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loadAllData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> loadAllDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loadDatafromTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet loadDatafromTable(string table, string queue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loadDatafromTable", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> loadDatafromTableAsync(string table, string queue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/changeState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool changeState(string p, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/changeState", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> changeStateAsync(string p, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/findIDfromUsername", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int findIDfromUsername(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/findIDfromUsername", ReplyAction="*")]
        System.Threading.Tasks.Task<int> findIDfromUsernameAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/findUsernamefromID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string findUsernamefromID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/findUsernamefromID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> findUsernamefromIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertDatatoMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool insertDatatoMessage(string id_user, string id_sender, System.DateTime time, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertDatatoMessage", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> insertDatatoMessageAsync(string id_user, string id_sender, System.DateTime time, string content);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface Service_DatachatSoapChannel : SnapChat.ServiceReference1.Service_DatachatSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service_DatachatSoapClient : System.ServiceModel.ClientBase<SnapChat.ServiceReference1.Service_DatachatSoap>, SnapChat.ServiceReference1.Service_DatachatSoap {
        
        public Service_DatachatSoapClient() {
        }
        
        public Service_DatachatSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service_DatachatSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service_DatachatSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service_DatachatSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public void connectData() {
            base.Channel.connectData();
        }
        
        public System.Threading.Tasks.Task connectDataAsync() {
            return base.Channel.connectDataAsync();
        }
        
        public System.Data.DataSet loadAllData() {
            return base.Channel.loadAllData();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> loadAllDataAsync() {
            return base.Channel.loadAllDataAsync();
        }
        
        public System.Data.DataSet loadDatafromTable(string table, string queue) {
            return base.Channel.loadDatafromTable(table, queue);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> loadDatafromTableAsync(string table, string queue) {
            return base.Channel.loadDatafromTableAsync(table, queue);
        }
        
        public bool changeState(string p, string id) {
            return base.Channel.changeState(p, id);
        }
        
        public System.Threading.Tasks.Task<bool> changeStateAsync(string p, string id) {
            return base.Channel.changeStateAsync(p, id);
        }
        
        public int findIDfromUsername(string s) {
            return base.Channel.findIDfromUsername(s);
        }
        
        public System.Threading.Tasks.Task<int> findIDfromUsernameAsync(string s) {
            return base.Channel.findIDfromUsernameAsync(s);
        }
        
        public string findUsernamefromID(int ID) {
            return base.Channel.findUsernamefromID(ID);
        }
        
        public System.Threading.Tasks.Task<string> findUsernamefromIDAsync(int ID) {
            return base.Channel.findUsernamefromIDAsync(ID);
        }
        
        public bool insertDatatoMessage(string id_user, string id_sender, System.DateTime time, string content) {
            return base.Channel.insertDatatoMessage(id_user, id_sender, time, content);
        }
        
        public System.Threading.Tasks.Task<bool> insertDatatoMessageAsync(string id_user, string id_sender, System.DateTime time, string content) {
            return base.Channel.insertDatatoMessageAsync(id_user, id_sender, time, content);
        }
    }
}
