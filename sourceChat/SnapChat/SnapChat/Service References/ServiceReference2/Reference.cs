//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SnapChat.ServiceReference2 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/connectData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void connectData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/connectData", ReplyAction="*")]
        System.Threading.Tasks.Task connectDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loadAllData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet loadAllData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loadAllData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> loadAllDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loadDatafromTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet loadDatafromTable(string table, string queue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loadDatafromTable", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> loadDatafromTableAsync(string table, string queue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/changeStateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool changeStateUser(string state, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/changeStateUser", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> changeStateUserAsync(string state, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/changeStateMess", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool changeStateMess(string state, string id1, string id2, string dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/changeStateMess", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> changeStateMessAsync(string state, string id1, string id2, string dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/findIDfromUsername", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int findIDfromUsername(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/findIDfromUsername", ReplyAction="*")]
        System.Threading.Tasks.Task<int> findIDfromUsernameAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/findUsernamefromID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string findUsernamefromID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/findUsernamefromID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> findUsernamefromIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool insertUsers(string User, string Pass, string State, string FullName, string Email, string Address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> insertUsersAsync(string User, string Pass, string State, string FullName, string Email, string Address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool deleteMessage(int id1, int id2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteMessage", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> deleteMessageAsync(int id1, int id2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertDatatoMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool insertDatatoMessage(string id_user, string id_sender, System.DateTime time, string content, string State);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/insertDatatoMessage", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> insertDatatoMessageAsync(string id_user, string id_sender, System.DateTime time, string content, string State);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addFriend", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool addFriend(int id1, int id2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addFriend", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> addFriendAsync(int id1, int id2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteFriend", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool deleteFriend(int id1, int id2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteFriend", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> deleteFriendAsync(int id1, int id2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool deleteAccount(int id1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteAccount", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> deleteAccountAsync(int id1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : SnapChat.ServiceReference2.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<SnapChat.ServiceReference2.WebService1Soap>, SnapChat.ServiceReference2.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public void connectData() {
            base.Channel.connectData();
        }
        
        public System.Threading.Tasks.Task connectDataAsync() {
            return base.Channel.connectDataAsync();
        }
        
        public System.Data.DataSet loadAllData() {
            return base.Channel.loadAllData();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> loadAllDataAsync() {
            return base.Channel.loadAllDataAsync();
        }
        
        public System.Data.DataSet loadDatafromTable(string table, string queue) {
            return base.Channel.loadDatafromTable(table, queue);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> loadDatafromTableAsync(string table, string queue) {
            return base.Channel.loadDatafromTableAsync(table, queue);
        }
        
        public bool changeStateUser(string state, string id) {
            return base.Channel.changeStateUser(state, id);
        }
        
        public System.Threading.Tasks.Task<bool> changeStateUserAsync(string state, string id) {
            return base.Channel.changeStateUserAsync(state, id);
        }
        
        public bool changeStateMess(string state, string id1, string id2, string dt) {
            return base.Channel.changeStateMess(state, id1, id2, dt);
        }
        
        public System.Threading.Tasks.Task<bool> changeStateMessAsync(string state, string id1, string id2, string dt) {
            return base.Channel.changeStateMessAsync(state, id1, id2, dt);
        }
        
        public int findIDfromUsername(string s) {
            return base.Channel.findIDfromUsername(s);
        }
        
        public System.Threading.Tasks.Task<int> findIDfromUsernameAsync(string s) {
            return base.Channel.findIDfromUsernameAsync(s);
        }
        
        public string findUsernamefromID(int ID) {
            return base.Channel.findUsernamefromID(ID);
        }
        
        public System.Threading.Tasks.Task<string> findUsernamefromIDAsync(int ID) {
            return base.Channel.findUsernamefromIDAsync(ID);
        }
        
        public bool insertUsers(string User, string Pass, string State, string FullName, string Email, string Address) {
            return base.Channel.insertUsers(User, Pass, State, FullName, Email, Address);
        }
        
        public System.Threading.Tasks.Task<bool> insertUsersAsync(string User, string Pass, string State, string FullName, string Email, string Address) {
            return base.Channel.insertUsersAsync(User, Pass, State, FullName, Email, Address);
        }
        
        public bool deleteMessage(int id1, int id2) {
            return base.Channel.deleteMessage(id1, id2);
        }
        
        public System.Threading.Tasks.Task<bool> deleteMessageAsync(int id1, int id2) {
            return base.Channel.deleteMessageAsync(id1, id2);
        }
        
        public bool insertDatatoMessage(string id_user, string id_sender, System.DateTime time, string content, string State) {
            return base.Channel.insertDatatoMessage(id_user, id_sender, time, content, State);
        }
        
        public System.Threading.Tasks.Task<bool> insertDatatoMessageAsync(string id_user, string id_sender, System.DateTime time, string content, string State) {
            return base.Channel.insertDatatoMessageAsync(id_user, id_sender, time, content, State);
        }
        
        public bool addFriend(int id1, int id2) {
            return base.Channel.addFriend(id1, id2);
        }
        
        public System.Threading.Tasks.Task<bool> addFriendAsync(int id1, int id2) {
            return base.Channel.addFriendAsync(id1, id2);
        }
        
        public bool deleteFriend(int id1, int id2) {
            return base.Channel.deleteFriend(id1, id2);
        }
        
        public System.Threading.Tasks.Task<bool> deleteFriendAsync(int id1, int id2) {
            return base.Channel.deleteFriendAsync(id1, id2);
        }
        
        public bool deleteAccount(int id1) {
            return base.Channel.deleteAccount(id1);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAccountAsync(int id1) {
            return base.Channel.deleteAccountAsync(id1);
        }
    }
}
